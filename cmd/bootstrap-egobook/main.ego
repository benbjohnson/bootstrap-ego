<%
package main

import "github.com/benbjohnson/bootstrap-ego"

func Head(ctx context.Context, w io.Writer) { %>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">
	<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/js/bootstrap.min.js" integrity="sha384-a5N7Y/aK3qNeh15eJKGWxsqtnX/wWdSZSKp+81YjTmS15nvnvxKHuzaWwXHDli+4" crossorigin="anonymous"></script>
<% }

func AlertRenderer(style string) func(ctx context.Context, w io.Writer) { 
	return func(ctx context.Context, w io.Writer) { %>
<bootstrap:Alert Style=style>
	This is a <%= style %> alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</bootstrap:Alert>

<bootstrap:Alert Style=style>
	<h4 class="alert-heading">Well done!</h4>
	<p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>
	<hr/>
	<p class="mb-0">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>
</bootstrap:Alert>

<bootstrap:Alert Style="warning" Class="fade show" Dismissable>
	<strong>Holy guacamole!</strong> You should check in on some of those fields below.
	<bootstrap:CloseButton/>
</bootstrap:Alert>
<% }
}

func BadgeRenderer(style string) func(ctx context.Context, w io.Writer) { 
	return func(ctx context.Context, w io.Writer) { %>
<h1>Example heading <bootstrap:Badge Style=style>New</bootstrap:Badge></h1>
<h2>Example heading <bootstrap:Badge Style=style>New</bootstrap:Badge></h2>
<h3>Example heading <bootstrap:Badge Style=style>New</bootstrap:Badge></h3>
<h4>Example heading <bootstrap:Badge Style=style>New</bootstrap:Badge></h4>
<h5>Example heading <bootstrap:Badge Style=style>New</bootstrap:Badge></h5>
<h6>Example heading <bootstrap:Badge Style=style>New</bootstrap:Badge></h6>

<p>
	<bootstrap:Badge Style=style><%= style %></bootstrap:Badge>
	<bootstrap:Badge Style=style Pill><%= style %></bootstrap:Badge>
</p>
<% }
}

func RenderBreadcrumb(ctx context.Context, w io.Writer) { %>
<nav aria-label="breadcrumb">
	<bootstrap:Breadcrumb>
		<bootstrap:BreadcrumbItem><a href="#">Home</a></bootstrap:BreadcrumbItem>
		<bootstrap:BreadcrumbItem><a href="#">Library</a></bootstrap:BreadcrumbItem>
		<bootstrap:BreadcrumbItem Active>Data</bootstrap:BreadcrumbItem>
	</bootstrap:Breadcrumb>
</nav>
<% }

func RenderButtonStyles(ctx context.Context, w io.Writer) { %>
<bootstrap:Button Style="primary">Primary</bootstrap:Button>
<bootstrap:Button Style="secondary">Secondary</bootstrap:Button>
<bootstrap:Button Style="success">Success</bootstrap:Button>
<bootstrap:Button Style="danger">Danger</bootstrap:Button>
<bootstrap:Button Style="warning">Warning</bootstrap:Button>
<bootstrap:Button Style="info">Info</bootstrap:Button>
<bootstrap:Button Style="light">Light</bootstrap:Button>
<bootstrap:Button Style="dark">Dark</bootstrap:Button>
<bootstrap:Button Style="link">Link</bootstrap:Button>
<% }

func RenderButtonTags(ctx context.Context, w io.Writer) { %>
<bootstrap:Button Style="primary" Href="#">Link</bootstrap:Button>
<bootstrap:Button Style="primary" Type="submit">Button</bootstrap:Button>
<bootstrap:Button NodeName="input" Style="primary" Type="button" Value="Input"/>
<bootstrap:Button NodeName="input" Style="primary" Type="submit" Value="Submit"/>
<bootstrap:Button NodeName="input" Style="primary" Type="reset" Value="Reset"/>
<% }

func RenderButtonOutline(ctx context.Context, w io.Writer) { %>
<bootstrap:Button Style="primary" Outline>Primary</bootstrap:Button>
<bootstrap:Button Style="secondary" Outline>Secondary</bootstrap:Button>
<bootstrap:Button Style="success" Outline>Success</bootstrap:Button>
<bootstrap:Button Style="danger" Outline>Danger</bootstrap:Button>
<bootstrap:Button Style="warning" Outline>Warning</bootstrap:Button>
<bootstrap:Button Style="info" Outline>Info</bootstrap:Button>
<bootstrap:Button Style="light" Outline>Light</bootstrap:Button>
<bootstrap:Button Style="dark" Outline>Dark</bootstrap:Button>
<% }

func RenderButtonSize(ctx context.Context, w io.Writer) { %>
<bootstrap:Button Style="primary" Size="lg">Large button</bootstrap:Button>
<bootstrap:Button Style="secondary" Size="lg">Large button</bootstrap:Button>
<bootstrap:Button Style="primary" Size="sm">Small button</bootstrap:Button>
<bootstrap:Button Style="secondary" Size="sm">Small button</bootstrap:Button>
<% }

func RenderButtonBlock(ctx context.Context, w io.Writer) { %>
<bootstrap:Button Style="primary" Block>Block button</bootstrap:Button>
<bootstrap:Button Style="secondary" Block>Block button</bootstrap:Button>
<% }

func RenderButtonActive(ctx context.Context, w io.Writer) { %>
<bootstrap:Button Href="#" Style="primary" Size="lg" Active>Primary link</bootstrap:Button>
<bootstrap:Button Href="#" Style="secondary" Size="lg" Active>Link</bootstrap:Button>
<% }

func RenderButtonDisabled(ctx context.Context, w io.Writer) { %>
<bootstrap:Button Style="primary" Size="lg" Disabled>Primary button</bootstrap:Button>
<bootstrap:Button Style="secondary" Size="lg" Disabled>Button</bootstrap:Button>
<% }

%>
